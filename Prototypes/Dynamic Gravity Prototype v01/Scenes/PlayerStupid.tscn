[gd_scene load_steps=5 format=3 uid="uid://io2dk4jogxmh"]

[sub_resource type="GDScript" id="GDScript_g46d8"]
script/source = "extends RigidBody3D

@onready var camera = $Camera3D

var move_speed = 3 #meters per second, average walking speed is 1.4
var look_speed = 1.5 #radians
var multiplier = 100

var input_dir = Vector3.ZERO
var output_dir_basis = Basis()
var output_dir = Vector3.ZERO
var input_rot = Vector3.ZERO
var output_rot_basis = Basis()
var output_rot = Vector3.ZERO

func _enter_tree():
	set_multiplayer_authority(str(name).to_int())

func _ready():
	if not is_multiplayer_authority(): return
	
	camera.current = true

func _physics_process(delta):
	if not is_multiplayer_authority(): return
	
	apply_central_force(get_node(\"..\").calc_grav(self))
	
	#Local refference
	input_dir = Vector3.ZERO
	input_rot = Vector3.ZERO
	input_dir.x -= Input.get_action_strength(\"move_left\")
	input_dir.x += Input.get_action_strength(\"move_right\")
	input_dir.y -= Input.get_action_strength(\"move_down\")
	input_dir.y += Input.get_action_strength(\"move_up\")
	input_dir.z -= Input.get_action_strength(\"move_forward\")
	input_dir.z += Input.get_action_strength(\"move_backward\")
	input_dir = input_dir * move_speed * multiplier
	input_rot.x -= Input.get_action_strength(\"look_down\")
	input_rot.x += Input.get_action_strength(\"look_up\")
	input_rot.y -= Input.get_action_strength(\"look_right\")
	input_rot.y += Input.get_action_strength(\"look_left\")
	input_rot.z -= Input.get_action_strength(\"roll_right\")
	input_rot.z += Input.get_action_strength(\"roll_left\")
	input_rot = input_rot * look_speed * multiplier
	
	output_dir_basis.x = input_dir.x * transform.basis.x
	output_dir_basis.y = input_dir.y * transform.basis.y
	output_dir_basis.z = input_dir.z * transform.basis.z
	output_dir = output_dir_basis.x + output_dir_basis.y + output_dir_basis.z
	output_rot_basis.x = input_rot.x * transform.basis.x
	output_rot_basis.y = input_rot.y * transform.basis.y
	output_rot_basis.z = input_rot.z * transform.basis.z
	output_rot = output_rot_basis.x + output_rot_basis.y + output_rot_basis.z
	
	#parent refference
	apply_central_force(output_dir)
	apply_torque(output_rot)
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_f73jh"]

[sub_resource type="CapsuleMesh" id="CapsuleMesh_uprxv"]

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_8f403"]
properties/0/path = NodePath(".:position")
properties/0/spawn = true
properties/0/sync = true
properties/1/path = NodePath(".:rotation")
properties/1/spawn = true
properties/1/sync = true
properties/2/path = NodePath(".:linear_velocity")
properties/2/spawn = true
properties/2/sync = true
properties/3/path = NodePath(".:angular_velocity")
properties/3/spawn = true
properties/3/sync = true

[node name="RigidBody3D" type="RigidBody3D"]
mass = 80.0
gravity_scale = 0.0
script = SubResource("GDScript_g46d8")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.5, 0)
shape = SubResource("CapsuleShape3D_f73jh")

[node name="MeshInstance3D" type="MeshInstance3D" parent="CollisionShape3D"]
mesh = SubResource("CapsuleMesh_uprxv")
skeleton = NodePath("")

[node name="Camera3D" type="Camera3D" parent="."]

[node name="MultiplayerSynchronizer" type="MultiplayerSynchronizer" parent="."]
replication_config = SubResource("SceneReplicationConfig_8f403")
